===========================
Creating and managing welds
===========================

Creating a new weld
===================

Create a new directory for the weld::

  $ mkdir fromble
  $ cd fromble

Create an XML file describing the weld. We're going to use the "canonical
example" weld::

   <?xml version="1.0" ?>
   <weld name="frank">
     <origin uri="ssh://git@home.example.com/ribbit/fromble" />
     <base name="project124" uri="ssh://git@foo.example.com/my/base" branch="b" rev=".." tag=".."/>
     <base name="igniting_duck" uri="ssh://git@bar.example.com/wobble" />
     <seam base="project124" dest="flibble" />
     <seam base="igniting_duck" source="foo" dest="bar" />
   </weld>

and we're going to put it into a an appropriate file with some editor - for
instance::

  $ vim fromble.xml

We can then use the ``weld`` commandline tool to initialise our weld::

  $ weld init fromble.xml
  > git init
  > git add <some-directory>/fromble/.weld/welded.xml .gitignore
  > git remote rm origin
  > git remote add origin ssh://git@home.example.com/ribbit/fromble
  > git commit --allow-empty --file /tmp/weldcommitYp7JZ2
  Weld initialised OK.

After that, our directory structure should look like::

  fromble/
    .git/...
    .gitignore
    .weld/
      welded.xml
    fromble.xml

(I've left out the content of the ``.git`` directory).

As we saw, the ``.gitignore`` and ``.weld/welded.xml`` files have been added
to the (new) git repository in this directory, and committed. The
``.gitignore`` instructs git to ignore some artefacts that weld knows it will
create in the ``.weld`` directory. The ``.weld/welded.xml`` is a "copy" of the
original ``fromble.xml`` (actually, it is produced by reading the original XML
and then writing it out from the internal datastructure, so the layout is
likely to be slightly different, but the content should have the same effect).

We don't need the original XML file, so I shall delete it::

  $ rm fromble.xml

If the URIs for the bases were real, we could now do::

  $ weld pull _all

which would use git to clone each of the bases into::

  .weld/bases/project124
  .weld/bases/igniting-duck

and then copy the appropriate content into the weld itself. After this, our
directory structure would look like::

  fromble/
    .git/...
    .gitignore
    .weld/
      bases/
        igniting_duck/
          .git/...
          one/
            <source-code A>
          two/
            <source-code B>
        projct124/
          .git/...
          one/
            <source-code C>
          two/
            <source-code D>
      counter
      welded.xml
    124/
      one/
        <source-code C>
      two/
        <source-code D>
    one-duck/
      <source-code A>
    two-duck/
      <source-code B>

Here we can see that in ``.weld/bases`` are the clones of the two remote
packages (our "bases"), each with its own ``.git`` directory. A normal user
will never interact with these, and strictly speaking they are not part of the
weld.

We can also see, at the top level of ``fromble``, that we now have three
source directories: ``124``, ``one-duck`` and ``two-duck``. These are checked
into the weld's git repository, and correspond to the seams described in the
XML file. Thus the weld source directory ``124`` corresponds to all of the
``project124`` base, whilst the two directories in the ``igniting_duck`` base
have been split into separate (in this case top-level) directories in the
weld.

Now we've got our weld set up, we can create a bare repository for it in the
normal manner - going to some appropriate place, doing::

  repo$ git init --bare

and then setting that up as the origin for our weld and pushing to it::

  $ git remote add origin <URI of remote repository>
  $ git push

The *user* can then be instructed to retrieve the weld by just doing::

  $ git clone <URI of remote repository>

Care and feeding of your weld
=============================

...how to use "weld push" and "weld pull" and friends to maintain a weld's
bases...


Setting up a muddle weld
========================

...what it says...

.. vim: set filetype=rst tabstop=8 softtabstop=2 shiftwidth=2 expandtab:
